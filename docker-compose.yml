version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: arbitrage-postgres
    environment:
      POSTGRES_DB: arbitrage
      POSTGRES_USER: arbitrage_user
      POSTGRES_PASSWORD: arbitrage_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arbitrage_user -d arbitrage"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: arbitrage-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Django Web Application
  web:
    build: .
    container_name: arbitrage-web
    environment:
      # Django settings
      DEBUG: "False"
      SECRET_KEY: "django-insecure-@9t@4rn2xrlbuh95k9nv16$vhoy%s7eallm3s2&q%6=1p+v^7n"
      ALLOWED_HOSTS: "localhost,127.0.0.1,0.0.0.0,pardak.ir,www.pardak.ir"
      CSRF_TRUSTED_ORIGINS: "https://pardak.ir,http://pardak.ir,ws://pardak.ir,wss://pardak.ir"
      
      # Database settings
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: "arbitrage"
      DB_USER: "arbitrage_user"
      DB_PASSWORD: "arbitrage_pass"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      
      # Redis settings
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      REDIS_PASSWORD: ""
      
      # Performance settings
      WORKER_COUNT: "8"
      ASGI_WORKERS: "4"
      MAX_CONNECTIONS: "1000"
      
      # Exchange API keys
      WALLEX_API_KEY: ""
      LBANK_API_KEY: ""
      RAMZINEX_API_KEY: ""
      
      # Logging
      LOG_LEVEL: "INFO"
      LOG_MAX_SIZE: "100MB"
      LOG_BACKUP_COUNT: "10"
    
    volumes:
      - ./logs:/app/logs
      - static_files:/app/staticfiles
    
    ports:
      - "8000:8000"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped

  # Workers Service (جداگانه)
  workers:
    build: .
    container_name: arbitrage-workers
    environment:
      # Same environment as web
      DEBUG: "False"
      SECRET_KEY: "django-insecure-@9t@4rn2xrlbuh95k9nv16$vhoy%s7eallm3s2&q%6=1p+v^7n"
      ALLOWED_HOSTS: "localhost,127.0.0.1,0.0.0.0,pardak.ir,www.pardak.ir"
      DB_ENGINE: "django.db.backends.postgresql"
      DB_NAME: "arbitrage"
      DB_USER: "arbitrage_user"
      DB_PASSWORD: "arbitrage_pass"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      REDIS_PASSWORD: ""
      WORKER_COUNT: "8"
      ASGI_WORKERS: "4"
      MAX_CONNECTIONS: "1000"
      WALLEX_API_KEY: ""
      LBANK_API_KEY: ""
      RAMZINEX_API_KEY: ""
      LOG_LEVEL: "INFO"
      LOG_MAX_SIZE: "100MB"
      LOG_BACKUP_COUNT: "10"
    
    volumes:
      - ./logs:/app/logs
    
    command: ["python", "manage.py", "start_workers"]
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_files:

networks:
  default:
    name: arbitrage-network